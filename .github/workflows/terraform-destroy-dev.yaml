name: 'Terraform destroy DEV'

on:
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  Terraform:
    env: 
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    name: "Terraform"
    environment: "dev"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: spoke

    - name: Terraform select workspace
      run: terraform workspace select DEV
      working-directory: spoke

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Destroy
      run: terraform apply -destroy -auto-approve -input=false -var-file=variables/DEV.tfvars -var-file=variables/all.tfvars
      working-directory: spoke


