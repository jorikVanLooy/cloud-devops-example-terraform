name: 'Terraform dev'

on:
  workflow_dispatch:
  pull_request:
    branches: [ "dev" ]

permissions:
  id-token: write

jobs:
  Terraform:
    name: "Terraform dev"
    env: 
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      work-dir: spoke
    environment: "dev"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: spoke

    - name: Terraform select workspace
      run: terraform workspace select DEV
      working-directory: ${{ env.work-dir }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ env.work-dir }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file=variables/DEV.tfvars -var-file=variables/all.tfvars
      working-directory: ${{ env.work-dir }}

    - name: Terraform apply
      run: terraform apply -input=false -var-file=variables/DEV.tfvars -var-file=variables/all.tfvars -auto-approve
      working-directory: ${{ env.work-dir }}
